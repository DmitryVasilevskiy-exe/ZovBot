import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from database import Database
from scheduler import Scheduler

logger = logging.getLogger(__name__)

def setup_handlers(application, db: Database, scheduler: Scheduler):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    
    async def check_admin(update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return update.effective_user.id == int(application.bot_data.get('ADMIN_ID'))

    async def set_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_group"""
        if not await check_admin(update):
            await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return

        if len(context.args) != 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_group [ID –≥—Ä—É–ø–ø—ã] [ID —Ç–µ–º—ã '–ü–ª–∞–Ω—ë—Ä–∫–∞']")
            return

        try:
            group_id = int(context.args[0])
            topic_id = int(context.args[1])

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
            chat = await context.bot.get_chat(group_id)
            if not chat.is_forum:
                await update.message.reply_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–º–µ
            try:
                await context.bot.send_message(
                    chat_id=group_id,
                    message_thread_id=topic_id,
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–º–µ '–ü–ª–∞–Ω—ë—Ä–∫–∞'"
                )
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–º—ã
                application.bot_data['GROUP_ID'] = group_id
                db.set_group(group_id, topic_id)
                await update.message.reply_text("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            except Exception as e:
                logger.error(f"Error accessing topic: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–µ–º—ã –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞")

        except ValueError:
            await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –∏ ID —Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        except Exception as e:
            logger.error(f"Error in set_group: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä—É–ø–ø—ã")

    async def create_kanban(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_kanban"""
        if not await check_admin(update):
            await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return

        if len(context.args) < 3:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_kanban @username1 @username2 ... DD.MM.YYYY –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
            )
            return

        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            usernames = []
            deadline_str = None
            description = []
            
            for arg in context.args:
                if arg.startswith('@'):
                    usernames.append(arg.lstrip('@'))
                elif not deadline_str and len(arg.split('.')) == 3:
                    deadline_str = arg
                else:
                    description.append(arg)

            if not usernames or not deadline_str:
                await update.message.reply_text(
                    "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_kanban @username1 @username2 ... DD.MM.YYYY –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                )
                return

            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
            deadline = datetime.strptime(deadline_str, '%d.%m.%Y')
            description_text = ' '.join(description)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for username in usernames:
                task_id = db.create_task(
                    group_id=application.bot_data.get('GROUP_ID'),
                    user_id=0,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    username=username,
                    description=description_text,
                    deadline=deadline
                )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
            topic_id = db.get_group_topic_id(application.bot_data.get('GROUP_ID'))
            mentions = ' '.join([f'@{username}' for username in usernames])
            message = (
                f"üóì –ó–∞–¥–∞—á–∞ –¥–ª—è {mentions}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description_text}\n"
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}"
            )
            
            await context.bot.send_message(
                chat_id=application.bot_data.get('GROUP_ID'),
                message_thread_id=topic_id,
                text=message
            )

            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY")
        except Exception as e:
            logger.error(f"Error in create_kanban: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á")

    async def my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_tasks"""
        tasks = db.get_user_tasks(update.effective_user.id)
        if not tasks:
            await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return

        message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        for task_id, description, deadline, status in tasks:
            message += f"ID: {task_id}\n"
            message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            message += f"–î–µ–¥–ª–∞–π–Ω: {deadline}\n\n"

        await update.message.reply_text(message)

    async def cancel_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel_task"""
        if len(context.args) != 1:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel_task [ID –∑–∞–¥–∞—á–∏]")
            return

        try:
            task_id = int(context.args[0])
            if db.cancel_task(task_id):
                await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("set_group", set_group))
    application.add_handler(CommandHandler("create_kanban", create_kanban))
    application.add_handler(CommandHandler("my_tasks", my_tasks))
    application.add_handler(CommandHandler("cancel_task", cancel_task)) 